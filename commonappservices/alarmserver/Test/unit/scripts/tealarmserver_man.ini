// in every test case, assume it is 1:00pm (13:00:00) now



[TESTCASE1]
// UCT-PREQ1118-MAN-AS-321
// 4.3.2.1 MaxAlarms setting limits number of Notifying alarms (MAN)
// MAN (noAlarms > MaxAlarms)
// register 5 alarms expirying same time, while the maximum is 3
// WHAT HAPPENS: first 3 alarms are in Notifying state, and the other two are WaitingToNotify

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0
Alarm03 = 6 0
Alarm04 = 8 0

Action00 = -1 UserWait 10
// After 10 seconds (@13:00:10)
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying NotPlaying Visible
Action03 = 2 CheckState Notifying Playing Visible
Action04 = 3 CheckState WaitingToNotify NotPlaying NotVisible
Action05 = 4 CheckState WaitingToNotify NotPlaying NotVisible



[TESTCASE2]
// UCT-PREQ1118-MAN-AS-322	
// 4.3.2.2 Snooze to Waiting to Notify state (MAN)
// MAN (noAlarms > MaxAlarms)
// register 5 alarms expirying same time, while the maximum is 3
// snooze alarm A2, wait for the snooze period to end
// WHAT HAPPENS: first 3 alarms are in Notifying state, and the other two are WaitingToNotify
//		when alarm A2 is snoozed: alarms A0,A1,A3 - Notifying, alarms A2,A4 - WaitingToNotify 
//		after snooze period ends A2 becoming notifying again because it has an original expiry time older than A3: 
//				alarms A0,A1,A2 - Notifying, alarms A3,A4 - WaitingToNotify

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0
Alarm03 = 6 0
Alarm04 = 8 0

Action00 = -1 UserWait 10
// After 15 seconds (@13:00:10)
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying NotPlaying Visible
Action03 = 2 CheckState Notifying Playing Visible
Action04 = 3 CheckState WaitingToNotify NotPlaying NotVisible
Action05 = 4 CheckState WaitingToNotify NotPlaying NotVisible
// User Snoozes A2
Action06 = 2 Snooze 1
Event07 = 2 SoundStop
Event08 = 2 Visible False
Event09 = 2 Delete
Event10 = 3 SetAlarm
Event11 = 3 SoundStart
Event12 = 3 Visible True
Event13 = 3 SetState
Action14 = 0 CheckState Notifying NotPlaying Visible
Action15 = 1 CheckState Notifying NotPlaying Visible
Action16 = 2 CheckState Snoozed NotPlaying NotVisible
Action17 = 3 CheckState Notifying Playing Visible
Action18 = 4 CheckState WaitingToNotify NotPlaying NotVisible
// A3 got sound stop when the first alarm play interval end
Event19 = 3 SoundStop
// A2 recovers from Snooze, and forces A3 to be removed
Event20 = 3 Visible False
Event21 = 3 Delete
Event22 = 2 SetAlarm
Event23 = 2 SoundStart
Event24 = 2 Visible True
Event25 = 2 SetState
Action26 = 0 CheckState Notifying NotPlaying Visible
Action27 = 1 CheckState Notifying NotPlaying Visible
Action28 = 2 CheckState Notifying Playing Visible
Action29 = 3 CheckState WaitingToNotify NotPlaying NotVisible
Action30 = 4 CheckState WaitingToNotify NotPlaying NotVisible



[TESTCASE3]
// UCT-PREQ1118-MAN-AS-323	
// 4.3.2.3 Multiple Alarm Sound Playing
// MAN (noAlarms < MaxAlarms)
// use rsc file: {offset=0, dur=30} { offset=1, dur=15 }
// register 2 alarms (A0, A1), wait for A1 to expire, check ASPS duration
// acknowledge alarm A1, check ASPS for A0
// WHAT HAPPENS: ASPS is restarted each time

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 62 0

Action00 = -1 UserWait 65
// A1 arrives (@13:01:02)
// After 1 min 5 seconds (@13:01:05)
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying Playing Visible
// User Clears A1
Action03 = 1 Clear
Action04 = -1 UserWait 15
// A1 goes Notified, 
// After 15 seconds (@13:01:20)
// sound for A0 is still playing which means it's the first interval (30sec), not the 2nd (10sec)
Action05 = 0 CheckState Notifying Playing Visible
Action06 = 1 CheckState Notified NotPlaying NotVisible
Action07 = -1 UserWait 20
// Wait another 20 seconds (@13:01:40)
// sound for A0 stops according to APC settings
Action08 = 0 CheckState Notifying NotPlaying Visible



[TESTCASE4]
// UCT-PREQ1118-MAN-AS-324	
// 4.3.2.3 Backwards compatibility for SAN
// SAN mode, register 2 alarms (A0,A1), verify that A1 gets sent to AltS only after the A0 is cleared
// WHAT HAPPENS: notifying only 1 alarm at a time

MaxAlarms = 1

Alarm00 = 0 0
Alarm01 = 2 0

// A0 arrives (to AltS)
Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState
Action04 = 0 CheckState Notifying Playing Visible
Action05 = -1 UserWait 5
Action06 = 0 CheckState Notifying Playing Visible
Action07 = 1 CheckState WaitingToNotify NotPlaying NotVisible
Action08 = 0 Clear
// A1 arrives
Event09 = 0 SoundStop
Event10 = 0 Visible False
Event11 = 0 Delete
Event12 = 1 SetAlarm
Event13 = 1 SoundStart
Event14 = 1 Visible True
Event15 = 1 SetState
Action16 = 0 CheckState Notified NotPlaying NotVisible
Action17 = 1 CheckState Notifying Playing Visible



[TESTCASE5]		
// 4.3.2.5 Snooze Specified Alarm man-ex
// MAN (noAlarms < MaxAlarms)
// User Snoozes A0 
// WHAT HAPPENS: AltS receives A1 Delete, A0 SoundStart

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 2 0

Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState 20
Action04 = -1 UserWait 1
Action05 = 0 CheckState Notifying Playing Visible
Action06 = 1 CheckState Queued NotPlaying NotVisible
// A1 arrives
Event07 = 0 SoundStop
Event08 = 1 SetAlarm
Event09 = 1 SoundStart
Event10 = 1 Visible True
Event11 = 1 SetState
Action12 = 0 CheckState Notifying NotPlaying Visible
Action13 = 1 CheckState Notifying Playing Visible
// User snoozes A0
Action14 = 0 Snooze 1
Event15 = 0 Visible False
Event16 = 0 Delete
Action17 = 0 CheckState Snoozed NotPlaying NotVisible
Action18 = 1 CheckState Notifying Playing Visible



[TESTCASE6]		
// 4.3.2.6 Clear Specified Alarm man-ex
// MAN (noAlarms < MaxAlarms)
// User clears A0 
// WHAT HAPPENS: AltS receives Delete A0 

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 2 0

Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState 20
Action04 = -1 UserWait 1
Action05 = 0 CheckState Notifying Playing Visible
Action06 = 1 CheckState Queued NotPlaying NotVisible
// A1 arrives
Action07 = -1 UserWait 2
Action08 = 0 CheckState Notifying NotPlaying Visible
Action09 = 1 CheckState Notifying Playing Visible
// User clears A0
Action10 = 0 Clear
Event11 = 0 Visible False
Event12 = 0 Delete
Action13 = 0 CheckState Notified NotPlaying NotVisible
Action14 = 1 CheckState Notifying Playing Visible



[TESTCASE7]		
// 4.3.2.7 AcknowledgeAll
// MAN (noAlarms > MaxAlarms)
// User clears all alarms 
// WHAT HAPPENS: All alarms become Notified 

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 1 0
Alarm02 = 2 0
Alarm03 = 3 0
Alarm04 = 4 0
Alarm05 = 5 0

Action00 = -1 UserWait 7
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying NotPlaying Visible
Action03 = 2 CheckState Notifying Playing Visible
Action04 = 3 CheckState WaitingToNotify NotPlaying NotVisible
Action05 = 4 CheckState WaitingToNotify NotPlaying NotVisible
Action06 = 5 CheckState WaitingToNotify NotPlaying NotVisible
// User clears all alarms
Action07 = -1 Clear
Action08 = -1 UserWait 2
Action09 = 0 CheckStateOnly Notified
Action10 = 1 CheckStateOnly Notified
Action11 = 2 CheckStateOnly Notified
Action12 = 3 CheckStateOnly Notified
Action13 = 4 CheckStateOnly Notified
Action14 = 5 CheckStateOnly Notified



[TESTCASE8]
// 4.3.2.8 Snooze when MaxAlarm is reached
// MAN (noAlarms > MaxAlarms)
// register more alarms than the limit 
// WHAT HAPPENS: A2 takes the free slot and becomes Notifying

MaxAlarms = 2

Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0

Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState 20
Action04 = -1 UserWait 5
Action05 = 0 CheckState Notifying NotPlaying Visible
Action06 = 1 CheckState Notifying Playing Visible
Action07 = 2 CheckState WaitingToNotify NotPlaying NotVisible
// User snoozes A1
Action08 = 1 Snooze 1
Event09 = 1 SoundStop
Event10 = 1 Visible False
Event11 = 1 Delete
Event12 = 2 SetAlarm
Event13 = 2 SoundStart
Event14 = 2 Visible True
Event15 = 2 SetState
Action16 = -1 UserWait 1
Action17 = 0 CheckState Notifying NotPlaying Visible
Action18 = 1 CheckState Snoozed NotPlaying NotVisible
Action19 = 2 CheckState Notifying Playing Visible



[TESTCASE9]
// 4.3.2.1 Late arrival SAN
// SAN 
// A0 has expiry time -1min before now (12:59:00), and gets added to AS after 15 sec delay (@13:00:15) 
// A1 expires now (@13:00:00), and gets added to AS rigth away (@13:00:00)
// WHAT HAPPENS: A0 kicks out A1 into WaitingToNotify state, A1 is removed (deleted) from AltS

MaxAlarms = 1

Alarm00 = -60 3	
Alarm01 = 0 0

// A1 arrives (to AltS)
Event00 = 1 SetAlarm
Event01 = 1 SoundStart
Event02 = 1 Visible True
Event03 = 1 SetState
Action04 = 1 CheckState Notifying Playing Visible
// A0 arrives
Event05 = 1 SoundStop
Event06 = 1 Visible False
Event07 = 1 Delete
Event08 = 0 SetAlarm
Event09 = 0 SoundStart
Event10 = 0 Visible True
Event11 = 0 SetState
Action12 = 0 CheckState Notifying Playing Visible
Action13 = 1 CheckState WaitingToNotify NotPlaying NotVisible



[TESTCASE10]
// 4.3.2.10 Late arrival MAN
// MAN (nofAlarms < MaxAlarms)
// A0 has expiry time -1min before now (12:59:00), and gets added to AS after 15 sec delay (@13:00:15) 
// A1 expires now (@13:00:00), and gets added to the AS rigth away (@13:00:00)
// WHAT HAPPENS: both A0 and A1 are Notifying, though sound plays for A0 as it expired before A1

MaxAlarms = 3

Alarm00 = -60 3		
Alarm01 = 0 0

Event00 = 1 SetAlarm
Event01 = 1 SoundStart
Event02 = 1 Visible True
Event03 = 1 SetState
Action04 = 1 CheckState Notifying Playing Visible
// A0 arrives
Event05 = 1 SoundStop
Event06 = 0 SetAlarm
Event07 = 0 SoundStart
Event08 = 0 Visible True
Event09 = 0 SetState
Action10 = 0 CheckState Notifying Playing Visible
Action11 = 1 CheckState Notifying NotPlaying Visible



[TESTCASE11]
// 4.3.2.11 Clear when MaxAlarm is reached
// MAN (noAlarms > MaxAlarms)
// register more alarms than the limit, clear alarm in the middle
// WHAT HAPPENS: A2 takes the free slot and becomes Notifying

MaxAlarms = 2

Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 2 0

// A0 arrives (@13:00:00)
Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState
// A1 arrives (@13:00:02)
Event04 = 0 SoundStop
Event05 = 1 SetAlarm
Event06 = 1 SoundStart
Event07 = 1 Visible True
Event08 = 1 SetState 
Action09 = -1 UserWait 1 
Action10 = 0 CheckState Notifying NotPlaying Visible
Action11 = 1 CheckState Notifying Playing Visible
Action12 = 2 CheckState WaitingToNotify NotPlaying NotVisible
// User clears A1
Action13 = 1 Clear
Action14 = -1 UserWait 1
// A2 comes in place of A1 since there is one free slot in AltS
Action15 = 0 CheckState Notifying NotPlaying Visible
Action16 = 1 CheckState Notified NotPlaying NotVisible
Action17 = 2 CheckState Notifying Playing Visible



[TESTCASE12]		
// 4.3.2.12 A1 sticks in-between A0-A2
// MAN (noAlarms > MaxAlarms)
// A0 and A2 are Notifying
// A1 expired between A0 and A2 but arrived to AS after A0 and A2 got into AltS
// WHAT HAPPENS: A2 goes WaitingToNotify and A1 takes place of A1 and becomes Notifying,
//		 sound plays for A1

MaxAlarms = 2

Alarm00 = 0 0
Alarm01 = 1 5
Alarm02 = 3 0

// A0 arrives (@13:00:00)
Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState
// A2 arrives (@13:00:03)
Event04 = 0 SoundStop
Event05 = 2 SetAlarm
Event06 = 2 SoundStart
Event07 = 2 Visible True
Event08 = 2 SetState
Action09 = 0 CheckState Notifying NotPlaying Visible
Action10 = 2 CheckState Notifying Playing Visible
// A1 comes in replacing A2
Event11 = 2 SoundStop
Event12 = 2 Visible False
Event13 = 2 Delete
Event14 = 1 SetAlarm
Event15= 1 SoundStart
Event16 = 1 Visible True
Action17 = 0 CheckState Notifying NotPlaying Visible
Action18 = 1 CheckState Notifying Playing Visible
Action19 = 2 CheckState WaitingToNotify NotPlaying NotVisible




[TESTCASE13]
// 4.3.2.13 Pause Sound for specified alarm
// MAN (noAlarms > MaxAlarms)
// ACTIONS: 	. set CAAS to MAN mode, max of 2 simultaneous alarms;
//		. register 3 alarms (A0, A1, A2), wait for all the alarms to expire (A0 and A1 Notifying, A2 is WaitingToNotify);
//		. PauseSound A1 for 1 minute, check state of the alarms;
//		. wait for PauseSound period to end, check state of the alarms.
// RESULT: . after PauseSound(A1) A1 becomes Snoozed, A2 becomes Notifying and starts playing sound;
//	   . After pause period expire, A1 becomes Notifying and playing again because it has older original expiry time than A2. And the A2 is downgraded to WaitingToNotify.

MaxAlarms = 2

Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0

Action00 = -1 UserWait 5
// After 5 seconds (@13:00:05)
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying Playing Visible
Action03 = 2 CheckState WaitingToNotify NotPlaying NotVisible
// User does PauseSound A1
Action04 = 1 PauseSound 1
Action05 = -1 UserWait 2 		// give some time AS to react
Action06 = 0 CheckState Notifying NotPlaying Visible
Action07 = 1 CheckState Snoozed NotPlaying NotVisible
Action08 = 2 CheckState Notifying Playing Visible
// Wait 1 min so that A1 PauseSound ends
Action09 = -1 UserWait 60
Action10 = 0 CheckState Notifying NotPlaying Visible
Action11 = 1 CheckState Notifying Playing Visible
// With the default APC settings within the 60 seconds we waited, sound for A2 will
// stop after 30secs and will restart again after another 30secs
Action12 = 2 CheckState WaitingToNotify NotPlaying NotVisible




[TESTCASE14]
// 4.3.1.14	 PauseSound interrupted by next expiring alarm (MAN)
// MAN (noAlarms < MaxAlarms)
// PauseSound when only 1 alarm is notifying, then another alarm expires
// ACTIONS: 	. MAN mode (nofAlarms < MaxAlarms=3); 
//		. add 2 alarms (A0, A1); 
//		. PauseSound for the playing alarm (A0), check state of the alarms (check A); 
//		. wait for the second alarm to expire (A1); 
//		. check state of the alarms, and for which alarm the sound is playing (check B) 
//		. wait for PauseSound period to end, check state of the alarms again (check C).	
// ExpectedResult 	A. A0 stops playing sound; 
//			B. A0 goes Snoozed; A1 starts Notifying, sound playing; 
//			C. A0 becomes Notifying, restarts playing sound, A1 is Notifying, but not playing sound. 

MaxAlarms = 3

Alarm00 = 0 0		// 13:00:00
Alarm01 = 5 5		// 13:00:05

Action00 = -1 UserWait 1
// @13:00:01
Action01 = 0 CheckState Notifying Playing Visible
// User does PauseSound A0 (A1 is not there yet)
Action02 = 0 PauseSound 1
Event03  = 0 SoundStop
Action04 = 0 CheckState Notifying NotPlaying Visible
Action05 = -1 UserWait 5
// @13:00:05  A1 expires and forces A0 to go Snoozed
// @13:00:06  UserWait ends
Action06 = 0 CheckState Snoozed NotPlaying NotVisible
Action07 = 1 CheckState Notifying Playing Visible
// Wait until A0 PauseSound ends
Action08 = -1 UserWait 57
// @13:01:03  UserWait ends 
Action09 = 0 CheckState Notifying Playing Visible
Action10 = 1 CheckState Notifying NotPlaying Visible
Action11 = -1 UserWait 5
// @13:01:06  it's time for the 2nd ASPS interval for A1, but it remains NotPlaying because A0 is playing
Action12 = 0 CheckState Notifying Playing Visible
Action13 = 1 CheckState Notifying NotPlaying Visible




[TESTCASE15]
// 4.3.1.15	Several alarms expire simultaneously (MAN)
// MAN (noAlarms < MaxAlarms)
// ACTION: test case when a few alarms expire at the same second
// WHAT HAPPENS: 

MaxAlarms = 3

Alarm00 = 2 0
Alarm01 = 2 0
Alarm02 = 2 0
Alarm03 = 2 0
Alarm04 = 2 0

Action00 = -1 UserWait 4
// (@13:00:02) all 5 alarms expire
// (@13:00:04) userwait ends
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying NotPlaying Visible
Action03 = 2 CheckState Notifying Playing Visible
Action04 = 3 CheckState WaitingToNotify NotPlaying NotVisible
Action05 = 4 CheckState WaitingToNotify NotPlaying NotVisible




[TESTCASE16]
// 4.3.1.16	PauseSound for a non-playing alarm (MAN)
// MAN (noAlarms < MaxAlarms)
// ACTION: PauseSound for a non-playing alarm
// WHAT HAPPENS: 

MaxAlarms = 3

Alarm00 = 0 0

Action00 = -1 UserWait 5
// (@13:00:00 - @13:00:30) A0 is playing (assume default ASPS)
Action01 = 0 CheckState Notifying Playing Visible
Action02 = -1 UserWait 30
// (@13:00:30) first interval in ASPS of A0 ends, sound stops playing
// (@13:00:35) A0 is not playing, try do PauseSound
Action03 = 0 CheckState Notifying NotPlaying Visible
Action04 = 0 PauseSound 1
Action05 = -1 UserWait 5
// (@13:00:40) A0 remains silent
Action06 = 0 CheckState Notifying NotPlaying Visible
Action05 = -1 UserWait 25
// (@13:01:00) A0 under default ASPS would go sound playing again, 
//		but PauseSound should still force it be silent
Action07 = 0 CheckState Notifying NotPlaying Visible



[TESTCASE17]
// 4.3.1.17	PauseSound for a playing alarm (SAN) 
// SAN (MaxAlarms=1)
// ACTION: PauseSound for a playing alarm in SAN mode
// WHAT HAPPENS: 

MaxAlarms = 1

Alarm00 = 0 0
Alarm01 = 1 0

Action00 = -1 UserWait 2
// After 2 seconds (@13:00:02)
Action01 = 0 CheckState Notifying Playing Visible
Action02 = 1 CheckState WaitingToNotify NotPlaying NotVisible
// @13:00:02 User does PauseSound on A0
Action03 = 0 PauseSound 1
// A0 becomes Snoozed -> A1 is Notifying, Playing
Action04 = -1 UserWait 1 
// @13:00:03
Action05 = 0 CheckState Snoozed NotPlaying NotVisible
Action06 = 1 CheckState Notifying Playing Visible
// Wait 1 min so that PauseSound for A1 ends
Action07 = -1 UserWait 62
// A0 becoming notifying again after snooze period because it has a older originaly expiry time than A1
Action08 = 0 CheckState Notifying Playing Visible
Action09 = 1 CheckState WaitingToNotify NotPlaying NotVisible





[TESTCASE18]
// 4.3.1.18	Client deletes playing alarm, when no WaitingToNotify alarms
// MAN (noAlarms < MaxAlarms)
// ACTION:  test case for MAN for client deleting a notifying alarm that is playing sound when
//		 there is no waiting to notifying alarm
// WHAT HAPPENS: 

MaxAlarms = 3

Alarm00 = 0 0

Action00 = -1 UserWait 2
// @13:00:02
Action01 = 0 CheckState Notifying Playing Visible
// @13:00:02 Delete A0
Action02 = 0 DeleteAlarm
Event03 = 0 SoundStop
Event04 = 0 Visible False
Event05 = 0 Delete




[TESTCASE19]
// 4.3.1.19	Client deletes a Notifying alarm that is playing sound
// MAN (noAlarms > MaxAlarms)
// ACTION: test case for client deleting a notifying alarm that is playing sound,
//	 the next waiting to notifying alarm will become notifying
// WHAT HAPPENS: 

MaxAlarms = 2

Alarm00 = 0 0
Alarm01 = 1 0
Alarm02 = 2 0

Action00 = -1 UserWait 3
// After 3 seconds (@13:00:03)
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying Playing Visible
Action03 = 2 CheckState WaitingToNotify NotPlaying NotVisible
// Delete A1 (playing at the moment), and A2 is WaitingToNotify
Action04 = 1 DeleteAlarm
Event05  = 1 SoundStop
Event06  = 1 Visible False
Event07  = 1 Delete
Event08 = 2 SetAlarm
Event09 = 2 SoundStart
Event10 = 2 Visible True
Action08 = 0 CheckState Notifying NotPlaying Visible
Action09 = 2 CheckState Notifying Playing Visible




[TESTCASE20]
// 4.3.1.20	Client deletes non-playing alarm, when no WaitingToNotify alarms
// MAN (noAlarms <= MaxAlarms)
// ACTION: test case for MAN for client deleting a notifying alarm that is not playing sound when
//		 there is no waiting to notifying alarm
// WHAT HAPPENS: 
MaxAlarms = 2

Alarm00 = 0 0
Alarm01 = 1 0

Action00 = -1 UserWait 3
// After 3 seconds (@13:00:03)
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying Playing Visible
// Delete A0 (not playing at the moment)
Action03 = 0 DeleteAlarm
Event04  = 0 Visible False
Event05  = 0 Delete
Action06 = 1 CheckState Notifying Playing Visible




[TESTCASE21]
// 4.3.1.21	Silence sound for non-playing alarm (MAN)
// MAN (noAlarms < MaxAlarms)
// ACTION: silence sound for a non-playing alarm (A0)
// WHAT HAPPENS: 

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 2 0

Action00 = -1 UserWait 5
// @13:00:02  A1 expires
// @13:00:05  UserWait ends
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying Playing Visible
Action03 = 0 Silence
// there should be no SoundStop opcode for A0! because it's not playing anyway
// following event should happen for A1 and only @13:00:32, when 1st sound play interval ends
Action04 = -1 UserWait 1 	// let some time for Alarm Server to react
Action05 = 0 CheckState Notifying NotPlaying Visible
Action06 = 1 CheckState Notifying Playing Visible
Event07 = 1 SoundStop
Event08 = 1 SoundStart
// @13:01:02  A1 restarts playing (2nd interval)
// @13:01:04  UserWait ends
Action09 = 0 CheckState Notifying NotPlaying Visible
Action10 = 1 CheckState Notifying Playing Visible
Action11 = -1 UserWait 4
// @13:01:05  would be a time for A0 to start 2nd interwal
// @13:01:08  UserWait ends
Action12 = 0 CheckState Notifying NotPlaying Visible
Action13 = 1 CheckState Notifying Playing Visible




[TESTCASE22]
// 4.3.1.22	Silence playing alarm (MAN)
// MAN (noAlarms < MaxAlarms)
// ACTION: silence sound for a playing alarm
// WHAT HAPPENS: 

MaxAlarms = 3

Alarm00 = 0 0
Alarm01 = 2 0

Action00 = -1 UserWait 5
// @13:00:02  A1 expires
// @13:00:05  UserWait ends
Action01 = 0 CheckState Notifying NotPlaying Visible
Action02 = 1 CheckState Notifying Playing Visible
Action03 = 1 Silence
Event04 =  1 SoundStop
Action05 = -1 UserWait 5
// silence A1 does not affect A0, so it remains silent - check this
// @13:00:10  UserWait ends
Action06 = 0 CheckState Notifying NotPlaying Visible
Action07 = 1 CheckState Notifying NotPlaying Visible
Action08 = -1 UserWait 51
// @13:01:00  would be a time for A0 to start 2nd interwal
// @13:01:01  UserWait ends
Action09 = 0 CheckState Notifying NotPlaying Visible
Action10 = 1 CheckState Notifying NotPlaying Visible
Action11 = -1 UserWait 2
// @13:01:02  A1 restarts playing (2nd interval)
// @13:01:03  UserWait ends
Action12 = 0 CheckState Notifying NotPlaying Visible
Action13 = 1 CheckState Notifying Playing Visible




[TESTCASE23]
// 4.3.1.23	Silence playing alarm (SAN)
// SAN (MaxAlarms=1)
// ACTION: silence alarm on a playing alarm
// WHAT HAPPENS: silence is in effect only for one sound play interval, and A0 restarts playing again when new interval begins

MaxAlarms = 1

Alarm00 = 0 0
Alarm01 = 1 0

Action00 = -1 UserWait 2
// After 2 seconds (@13:00:02)
Action01 = 0 CheckState Notifying Playing Visible
Action02 = 1 CheckState WaitingToNotify  NotPlaying NotVisible
// User does Silence A0
Action03 = 0 Silence
Event04 = 0 SoundStop
Action05 = -1 UserWait 1 
Action06 = 0 CheckState Notifying NotPlaying Visible
Action07 = 1 CheckState WaitingToNotify NotPlaying NotVisible
// Wait 1 min so that new sound playing interval begins
Action08 = -1 UserWait 60
// @13:01:02 now A1 starts playing again
Action09 = 0 CheckState Notifying Playing Visible
Action10 = 1 CheckState WaitingToNotify NotPlaying NotVisible




[TESTCASE24]
// 4.3.1.24	Clear late arrival alarm
// Testcase based on TESTCASE10
// MAN (nofAlarms < MaxAlarms)
// order alarms expire: A0, A1, A2
// order alarms arrive to AltS: A2, A1, A0
// then Clear(A0)

MaxAlarms = 3

Alarm00 = -2 3		// expires 12:59:58, added @13:00:03		
Alarm01 = -1 2		// expires 12:59:59, added @13:00:02
Alarm02 = 0 1		// expires 13:00:00, added @13:00:01

// @13:00:01	A2 arrives
Event00 = 2 SetAlarm
Event01 = 2 SoundStart
Event02 = 2 Visible True
Event03 = 2 SetState
// @13:00:02	A1 arrives, becomes Playing
Event04 = 2 SoundStop
Event05 = 1 SetAlarm
Event06 = 1 SoundStart
Event07 = 1 Visible True
Event08 = 1 SetState
Action09 = 1 CheckState Notifying Playing Visible
Action10 = 2 CheckState Notifying NotPlaying Visible
// @13:00:03	A0 arrives, becomes Playing
Event11 = 1 SoundStop
Event12 = 0 SetAlarm
Event13 = 0 SoundStart
Event14 = 0 Visible True
Event15 = 0 SetState
Action16 = 0 CheckState Notifying Playing Visible
Action17 = 1 CheckState Notifying NotPlaying Visible
Action18 = 2 CheckState Notifying NotPlaying Visible
Action19 = -1 UserWait 2
// @13:00:05
Action20 = 0 Clear
Event21 = 0 SoundStop
Event22 = 0 Visible False
Event23 = 0 Delete
Event24 = 2 SoundStart
Action25 = 1 CheckState Notifying NotPlaying Visible
Action26 = 2 CheckState Notifying Playing Visible


[TESTCASE25]
// 4.3.1.25	Adding alarms after reconnect to AS and CAAS

MaxAlarms = 5

Alarm00 = 0 0
Alarm01 = 1 0
Alarm02 = 2 0

Alarm03 = 6 5
Alarm04 = 7 5
Alarm05 = 8 5


// @13:00:00	A0 expires
Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState
// @13:00:01	A1 expires, becomes Playing
Event04 = 0 SoundStop
Event05 = 1 SetAlarm
Event06 = 1 SoundStart
Event07 = 1 Visible True
Event08 = 1 SetState
Action09 = 0 CheckState Notifying NotPlaying Visible
Action10 = 1 CheckState Notifying Playing Visible
Action11 = 2 CheckState Queued NotPlaying NotVisible
// @13:00:02	A2 expires, becomes Playing
Event12 = 1 SoundStop
Event13 = 2 SetAlarm
Event14 = 2 SoundStart
Event15 = 2 Visible True
Event16 = 2 SetState
Action17 = 0 CheckState Notifying NotPlaying Visible
Action18 = 1 CheckState Notifying NotPlaying Visible
Action19 = 2 CheckState Notifying Playing Visible
// Clear all 3 alarms one by one
Action20 = 0 Clear
Event21 = 0 Visible False
Event22 = 0 Delete
Action23 = 1 Clear
Event24 = 1 Visible False
Event25 = 1 Delete
Action26 = 2 Clear
Event27 = 2 SoundStop
Event28 = 2 Visible False
Event29 = 2 Delete

// RECONNECT TO AS and CAAS, will do a 1 sec timeout before reconnecting
Action30 = -1 ReconnectToAS

// @13:00:06	A3 expires
Event31 = 3 SetAlarm
Event32 = 3 SoundStart
Event33 = 3 Visible True
Event34 = 3 SetState
// @13:00:07	A4 expires, becomes Playing
Event35 = 3 SoundStop
Event36 = 4 SetAlarm
Event37 = 4 SoundStart
Event38 = 4 Visible True
Event39 = 4 SetState
Action40 = 3 CheckState Notifying NotPlaying Visible
Action41 = 4 CheckState Notifying Playing Visible
Action42 = 5 CheckState Queued NotPlaying NotVisible
// @13:00:08	A5 expires, becomes Playing
Event43 = 4 SoundStop
Event44 = 5 SetAlarm
Event45 = 5 SoundStart
Event46 = 5 Visible True
Event47 = 5 SetState
Action48 = 3 CheckState Notifying NotPlaying Visible
Action49 = 4 CheckState Notifying NotPlaying Visible
Action50 = 5 CheckState Notifying Playing Visible


[TESTCASE26]
// 4.3.1.26	SAN recover from Snooze
// SAN (MaxAlarms=1)
// ACTION:  Alarm A0 expires and becomes notifying, then it's snoozed for 1 min. Then A1 is becomes notifying. 
// WHAT HAPPENS: When A0 expires again after snooze period ends, Because A0 has an original expiry time older than A1, Alarm server will downgrade A1 to WaitingToNotify
//		and A0 will become the Notifying alarm.

MaxAlarms = 1

Alarm00 = 0 0
Alarm01 = 1 1

// @13:00:00	A0 expires
Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState
Action04 = 0 CheckState Notifying Playing Visible
Action05 = 1 CheckState InPreparation NotPlaying NotVisible
// A0 Snooze for 1 minute
Action06 = 0 Snooze 1
Event07 = 0 SoundStop
Event08 = 0 Visible False
Event09 = 0 Delete
Action10 = 0 CheckState Snoozed NotPlaying NotVisible
Action11 = 1 CheckState InPreparation NotPlaying NotVisible
// A1 expires
Event12 = 1 SetAlarm
Event13 = 1 SoundStart
Event14 = 1 Visible True
Event15 = 1 SetState
Action16 = 0 CheckState Snoozed NotPlaying NotVisible
Action17 = 1 CheckState Notifying Playing Visible
// A1 got sound stop when the first alarm play interval end
Event18 = 1 SoundStop
// A0 recovers from Snooze, and forces A1 to be removed
Event19 = 1 Visible False
Event20 = 1 Delete
Event21 = 0 SetAlarm
Event22 = 0 SoundStart
Event23 = 0 Visible True
Event24 = 0 SetState
Action25 = 0 CheckState Notifying Playing Visible
Action26 = 1 CheckState WaitingToNotify NotPlaying NotVisible


[TESTCASE27]
// 4.3.1.27	Adding alarms after reconnect to AS and CAAS and clear alarms using acknowledgeAll command

MaxAlarms = 5

Alarm00 = 0 0
Alarm01 = 1 0
Alarm02 = 2 0

Alarm03 = 6 6
Alarm04 = 7 6
Alarm05 = 8 6


// @13:00:00	A0 expires
Event00 = 0 SetAlarm
Event01 = 0 SoundStart
Event02 = 0 Visible True
Event03 = 0 SetState
// @13:00:01	A1 expires, becomes Playing
Event04 = 0 SoundStop
Event05 = 1 SetAlarm
Event06 = 1 SoundStart
Event07 = 1 Visible True
Event08 = 1 SetState
Action09 = 0 CheckState Notifying NotPlaying Visible
Action10 = 1 CheckState Notifying Playing Visible
Action11 = 2 CheckState Queued NotPlaying NotVisible
// @13:00:02	A2 expires, becomes Playing
Event12 = 1 SoundStop
Event13 = 2 SetAlarm
Event14 = 2 SoundStart
Event15 = 2 Visible True
Event16 = 2 SetState
Action17 = 0 CheckState Notifying NotPlaying Visible
Action18 = 1 CheckState Notifying NotPlaying Visible
Action19 = 2 CheckState Notifying Playing Visible
// Clear all 3 alarms
Action20 = -1 Clear
Action21 = -1 UserWait 1
Action22 = 0 CheckStateOnly Notified
Action23 = 1 CheckStateOnly Notified
Action24 = 2 CheckStateOnly Notified

Action25 = -1 UserWait 1

// RECONNECT TO AS and CAAS, will do a 1 sec timeout before reconnecting
Action26 = -1 ReconnectToAS

// @13:00:06	A3 expires
Event27 = 3 SetAlarm
Event28 = 3 SoundStart
Event29 = 3 Visible True
Event30 = 3 SetState
// @13:00:07	A4 expires, becomes Playing
Event31 = 3 SoundStop
Event32 = 4 SetAlarm
Event33 = 4 SoundStart
Event34 = 4 Visible True
Event35 = 4 SetState
Action36 = 3 CheckState Notifying NotPlaying Visible
Action37 = 4 CheckState Notifying Playing Visible
Action38 = 5 CheckState Queued NotPlaying NotVisible
// @13:00:08	A5 expires, becomes Playing
Event39 = 4 SoundStop
Event40 = 5 SetAlarm
Event41 = 5 SoundStart
Event42 = 5 Visible True
Event43 = 5 SetState
Action44 = 3 CheckState Notifying NotPlaying Visible
Action45 = 4 CheckState Notifying NotPlaying Visible
Action46 = 5 CheckState Notifying Playing Visible



[TESTCASE28]
// WHAT HAPPENS: alarm expires, sound is playing, silence alarm command sent

MaxAlarms = 1

Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0

// A0 Expires (@13:00:00)
Event00  = 0 SetAlarm
Event01  = 0 SoundStart
Event02  = 0 Visible True
Event03  = 0 SetState
Action04 = 0 CheckState Notifying Playing Visible
Action05 = 1 CheckState Queued NotPlaying NotVisible
Action06 = 2 CheckState Queued NotPlaying NotVisible
// Snooze A0
Action07 = 0 PauseSound 1
Event08  = 0 SoundStop
Action09 = 0 CheckState Notifying NotPlaying Visible
Action10 = 1 CheckState Queued NotPlaying NotVisible
Action11 = 2 CheckState Queued NotPlaying NotVisible
// A1 Expires (@13:00:02)
Event12  = 0 Visible False
Event13  = 0 Delete
Event14  = 1 SetAlarm
Event15  = 1 SoundStart
Event16  = 1 Visible True
Event17  = 1 SetState
Action18 = 0 CheckState Snoozed NotPlaying NotVisible
Action29 = 1 CheckState Notifying Playing Visible
Action20 = 2 CheckState Queued NotPlaying NotVisible
// Snooze A1
Action21 = 1 PauseSound 1
Event22  = 1 SoundStop
// A2 Expires (@13:00:04)
Event23  = 1 SoundStop
Event24  = 1 Visible False
Event25  = 1 Delete
Event26  = 2 SetAlarm
Event27  = 2 SoundStart
Event28  = 2 Visible True
Event29  = 2 SetState
Action30 = 0 CheckState Snoozed NotPlaying NotVisible
Action31 = 1 CheckState Snoozed NotPlaying NotVisible
Action32 = 2 CheckState Notifying Playing Visible
// A2 Sound Interval Ends
Event33  = 2 SoundStop
// A0 Snooze Expires (@13:01:00)
Event34  = 2 Visible False
Event35  = 2 Delete
Event36  = 0 SetAlarm
Event37  = 0 SoundStart
Event38  = 0 Visible True
Event39  = 0 SetState
Action40 = 0 CheckState Notifying Playing Visible
Action41 = 1 CheckState Snoozed NotPlaying NotVisible
Action42 = 2 CheckState WaitingToNotify NotPlaying NotVisible
Action43 = -1 UserWait 5
// A1 Snooze Expires (@13:01:02)
Action44 = 0 CheckState Notifying Playing Visible
Action45 = 1 CheckState WaitingToNotify NotPlaying NotVisible
Action46 = 2 CheckState WaitingToNotify NotPlaying NotVisible


[TESTCASE29]
// WHAT HAPPENS: Clear all notifying alarms, while no alarms notifying

MaxAlarms = 1
Alarm00 = 4 0

Action00 = -1 UserWait 2
Action01 = 0 CheckState Queued NotPlaying NotVisible
Action02 = -1 Clear
Event03  = 0 SetAlarm
Event04  = 0 SoundStart
Event05  = 0 Visible True
Event06  = 0 SetState
Event07  = 0 CheckState Notifying Playing Visible


[TESTCASE30]
// WHAT HAPPENDS: Notifying alarm is deleted, which waiting to notify alarm gets "promoted"?

MaxAlarms = 2
Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0

// A0 Expires
Event00  = 0 SetAlarm
Event01  = 0 SoundStart
Event02  = 0 Visible True
Event03  = 0 SetState
// A1 Expires
Event04  = 0 SoundStop
Event05  = 1 SetAlarm
Event06  = 1 SoundStart
Event07  = 1 Visible True
Event08  = 1 SetState
Action09 = -1 UserWait 3
// A2 Expires
Action10 = 0 CheckState Notifying NotPlaying Visible
Action11 = 1 CheckState Notifying Playing Visible
Action12 = 2 CheckState WaitingToNotify NotPlaying NotVisible
// Delete A1 (playing)
Action13 = 1 DeleteAlarm
Event14  = 1 SoundStop
Event15  = 1 Visible False
Event16  = 1 Delete
Event17  = 2 SetAlarm
Event18  = 2 SoundStart
Event19  = 2 Visible True
Event20  = 2 SetState
Action21 = 0 CheckState Notifying NotPlaying Visible
Action22 = 2 CheckState Notifying Playing Visible


[TESTCASE31]
// WHAT HAPPENDS: Notifying alarm is deleted, which notifying alarm gets "promoted"?

MaxAlarms = 3
Alarm00 = 0 0
Alarm01 = 2 0
Alarm02 = 4 0

// A0 Expires
Event00  = 0 SetAlarm
Event01  = 0 SoundStart
Event02  = 0 Visible True
Event03  = 0 SetState
// A1 Expires
Event04  = 0 SoundStop
Event05  = 1 SetAlarm
Event06  = 1 SoundStart
Event07  = 1 Visible True
Event08  = 1 SetState
// A2 Expires
Event09  = 1 SoundStop
Event10  = 2 SetAlarm
Event11  = 2 SoundStart
Event12  = 2 Visible True
Event13  = 2 SetState
Action14 = 0 CheckState Notifying NotPlaying Visible
Action15 = 1 CheckState Notifying NotPlaying Visible
Action16 = 2 CheckState Notifying Playing Visible
// Delete A2 (playing)
Action17 = 2 DeleteAlarm
Event18  = 2 SoundStop
Event19  = 2 Visible False
Event20  = 2 Delete
Action21 = 1 SoundStart
Action22 = 0 CheckState Notifying NotPlaying Visible
Action23 = 1 CheckState Notifying Playing Visible


[DEF063436]
MaxAlarms = 1
Alarm00 = 2   0
Alarm01 = 62  0
Alarm02 = 122 0
Alarm03 = 132 130
Alarm04 = 192 130
Alarm05 = 252 130

Action00 = -1 UserWait 3
// A0 expires (@13:00:02)
Action01 = 0 CheckState Notifying Playing Visible
Action02 = 1 CheckState Queued NotPlaying NotVisible
Action03 = 2 CheckState Queued NotPlaying NotVisible
// User Clears A0
Action04 = 0 Clear
Action05 = -1 UserWait 2
Action06 = 0 CheckState Notified NotPlaying NotVisible
Action07 = 1 CheckState Queued NotPlaying NotVisible
Action08 = 2 CheckState Queued NotPlaying NotVisible
Action09 = -1 UserWait 58
// A1 expires (@13:01:02)
Action10 = 0 CheckState Notified NotPlaying NotVisible
Action11 = 1 CheckState Notifying Playing Visible
Action12 = 2 CheckState Queued NotPlaying NotVisible
// User Clears A1
Action13 = 1 Clear
Action14 = -1 UserWait 2
Action15 = 0 CheckState Notified NotPlaying NotVisible
Action16 = 1 CheckState Notified NotPlaying NotVisible
Action17 = 2 CheckState Queued NotPlaying NotVisible
Action18 = -1 UserWait 58
// A2 expires (@13:02:02)
Action19 = 0 CheckState Notified NotPlaying NotVisible
Action20 = 1 CheckState Notified NotPlaying NotVisible
Action21 = 2 CheckState Notifying Playing Visible
// User Clears A2
Action22 = 2 Clear
Action23 = -1 UserWait 2
Action24 = 0 CheckState Notified NotPlaying NotVisible
Action25 = 1 CheckState Notified NotPlaying NotVisible
Action26 = 2 CheckState Notified NotPlaying NotVisible
Action27 = 0 DeleteAlarm
Action28 = 1 DeleteAlarm
Action29 = 2 DeleteAlarm
Action30 = -1 UserWait 10
// A3 expires (@13:02:12)
Action31 = 3 CheckState Notifying Playing Visible
Action32 = 4 CheckState Queued NotPlaying NotVisible
Action33 = 5 CheckState Queued NotPlaying NotVisible
Action34 = -1 UserWait 60
// A1 expires (@13:03:12)
Action35 = 3 CheckState Notifying Playing Visible
Action36 = 4 CheckState WaitingToNotify NotPlaying NotVisible
Action37 = 5 CheckState Queued NotPlaying NotVisible
// A2 expires (@13:04:12)
Action38 = -1 UserWait 60
Action39 = 3 CheckState Notifying Playing Visible
Action40 = 4 CheckState WaitingToNotify NotPlaying NotVisible
Action41 = 5 CheckState WaitingToNotify NotPlaying NotVisible
Action42 = 3 Clear
Action43 = -1 UserWait 2
Action44 = 3 CheckState Notified NotPlaying NotVisible
Action45 = 4 CheckState Notifying Playing Visible
Action46 = 5 CheckState WaitingToNotify NotPlaying NotVisible

